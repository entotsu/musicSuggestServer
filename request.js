// Generated by CoffeeScript 1.7.1
(function() {
  var LF_KEY, LF_URL, YT_KEY, YT_URL, clog, get, getSimilarArtist, getTopTrack, lastfmGet, qs, req, searchArtist, searchVideo, youTubeGet;

  clog = function(s) {
    return console.log(s);
  };

  clog("request.coffee");

  LF_URL = "http://ws.audioscrobbler.com/2.0/?";

  LF_KEY = "3119649624fae2e9531bc4639a08cba8";

  YT_URL = "https://www.googleapis.com/youtube/v3/search/?";

  YT_KEY = "AIzaSyArZbAYSmERlrJTgQggy8bZ_8xU7Y5z0G0";

  req = require('request');

  qs = require('querystring');

  searchArtist = function(artistName, callback) {
    var params;
    params = {
      api_key: LF_KEY,
      format: "json",
      method: "artist.search",
      limit: 10,
      artist: artistName
    };
    return lastfmGet(params, function(body) {
      return callback(body.results.artistmatches.artist);
    });
  };

  getSimilarArtist = function(artistName, artistId, limit, callback) {
    var params;
    params = {
      api_key: LF_KEY,
      format: "json",
      method: "artist.getsimilar",
      limit: limit,
      mbid: artistId,
      artist: artistName
    };
    return lastfmGet(params, function(body) {
      if (!body.similarartists) {
        console.error("body.similarartists is undefined!");
        return console.error(body);
      } else if (!body.similarartists.artist) {
        console.error("body.similarartists.artist is undefined!");
        return console.error(body);
      } else {
        return callback(body.similarartists.artist);
      }
    });
  };

  getTopTrack = function(artistName, artistId, limit, callback) {
    var params;
    params = {
      api_key: LF_KEY,
      format: "json",
      method: "artist.getTopTracks",
      limit: limit,
      mbid: artistId,
      artist: artistName
    };
    return lastfmGet(params, function(body) {
      if (!body.toptracks) {
        console.error("body.toptracks is undefined!");
        return console.error(body);
      } else if (!body.toptracks.track) {
        console.error("body.toptracks.track is undefined!");
        return console.error(body);
      } else {
        return callback(body.toptracks.track);
      }
    });
  };

  searchVideo = function(keyword, limit, callback) {
    var params;
    params = {
      key: YT_KEY,
      q: keyword,
      maxResults: limit,
      part: "snippet",
      type: "video",
      order: "relevance",
      regionCode: "JP",
      videoCategoryId: "10"
    };
    return youTubeGet(params, function(body) {
      if (!body.items) {
        console.error(body);
        return console.error("video items is undefined!");
      } else {
        return callback(body.items);
      }
    });
  };

  lastfmGet = function(params, callback) {
    var options;
    options = {
      url: LF_URL + qs.stringify(params),
      json: true
    };
    return get(options, callback);
  };

  youTubeGet = function(params, callback) {
    var options;
    options = {
      url: YT_URL + qs.stringify(params),
      json: true
    };
    return get(options, callback);
  };

  get = function(options, callback) {
    return req.get(options, function(error, response, body) {
      if (error) {
        return clog("error: " + response.statusCode);
      } else if (response.statusCode === 200) {
        return callback(body);
      }
    });
  };

  module.exports = {
    searchArtist: searchArtist,
    getSimilarArtist: getSimilarArtist,
    getTopTrack: getTopTrack,
    searchVideo: searchVideo
  };

}).call(this);
