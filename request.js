// Generated by CoffeeScript 1.7.1
(function() {
  var LF_KEY, LF_URL, get, getSimilarArtist, getTopTrack, lastfmGet, log, qs, req, searchArtist;

  log = function(s) {
    return console.log(s);
  };

  log("request.coffee");

  LF_URL = "http://ws.audioscrobbler.com/2.0/?";

  LF_KEY = "3119649624fae2e9531bc4639a08cba8";

  req = require('request');

  qs = require('querystring');

  searchArtist = function(artistName, callback) {
    var params;
    log("searchArtist");
    params = {
      api_key: LF_KEY,
      format: "json",
      method: "artist.search",
      limit: 10,
      artist: artistName
    };
    return lastfmGet(params, function(body) {
      return callback(body.results.artistmatches.artist);
    });
  };

  getSimilarArtist = function(artistName, artistId, callback) {
    var params;
    log("getSimilarArtist");
    params = {
      api_key: LF_KEY,
      format: "json",
      method: "artist.getsimilar",
      limit: 10,
      mbid: artistId,
      artist: artistName
    };
    return lastfmGet(params, function(body) {
      return callback(body.similarartists.artist);
    });
  };

  getTopTrack = function(artistName, artistId, callback) {
    var params;
    log("getTopTrack");
    params = {
      api_key: LF_KEY,
      format: "json",
      method: "artist.getTopTracks",
      limit: 100,
      mbid: artistId,
      artist: artistName
    };
    return lastfmGet(params, function(body) {
      return callback(body.toptracks.track);
    });
  };

  lastfmGet = function(params, callback) {
    var options;
    options = {
      url: LF_URL + qs.stringify(params),
      json: true
    };
    return get(options, callback);
  };

  get = function(options, callback) {
    console.log(options.url);
    return req.get(options, function(error, response, body) {
      if (error) {
        return log("error: " + response.statusCode);
      } else if (response.statusCode === 200) {
        return callback(body);
      }
    });
  };

  module.exports = {
    searchArtist: searchArtist,
    getSimilarArtist: getSimilarArtist,
    getTopTrack: getTopTrack
  };

}).call(this);
