// Generated by CoffeeScript 1.7.1
(function() {
  var DEFAULT_LIMIT_OF_TOP_TRACK, DELAY_OF_START_MAIN_LOOP, FIRST_ARTIST_LIMIT, FIRST_TRACK_LIMIT, NG_WORDS, Stream, addTracksLoopInterval, addVideoLoopInterval, clog, moment, randomPick, req,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  clog = function(s) {
    return console.log(s);
  };

  clog("stream.coffee");

  req = require('./request.js');

  moment = require("moment");

  FIRST_ARTIST_LIMIT = 10;

  FIRST_TRACK_LIMIT = 5;

  DELAY_OF_START_MAIN_LOOP = 5000;

  addTracksLoopInterval = function(tracks_num) {
    var delay;
    delay = tracks_num * 1000 + 1000;
    console.log("wait for adding top track " + delay + "msec");
    return delay;
  };

  addVideoLoopInterval = function() {
    return 5000;
  };

  DEFAULT_LIMIT_OF_TOP_TRACK = 999;

  NG_WORDS = ["歌ってみ", "うたってみ", "カラオケ", "カバー", "cover", "コピー", "copy", "ピッチ", "弾いてみ", "ｺﾋﾟｰ", "メドレー", "ﾒﾄﾞﾚｰ", "BGM", "作業用"];

  Stream = (function() {
    function Stream(artistName, artistId) {
      var self;
      this.artistName = artistName;
      this.artistId = artistId;
      this.addVideoLoop = __bind(this.addVideoLoop, this);
      this.addTracksLoop = __bind(this.addTracksLoop, this);
      self = this;
      this.uncheckedTracks = [];
      this.uncheckedVideos = [];
      this.playlist = [];
      this.similarArtists = [];
      this.id = moment().unix();
      this.isStartAddTracksLoop = false;
      this.isStartAddVideosLoop = false;
      self.startStream();
      this.firstRequestDelay = 6000;
    }

    Stream.prototype.popTracks = function(num) {
      var returnTracks;
      clog("popTracks");
      if (!num || num <= 0) {
        returnTracks = this.playlist.concat();
        this.playlist = [];
        return returnTracks;
      }
    };

    Stream.prototype.stop = function() {
      return clog("stop stream");
    };

    Stream.prototype.startStream = function() {
      clog("##### startStream #####");
      this.generateFastPlaylist();
      return setTimeout(((function(_this) {
        return function() {
          return _this.addArtists(999, function() {
            _this.addTracksLoop();
            return _this.addVideoLoop();
          });
        };
      })(this)), DELAY_OF_START_MAIN_LOOP);
    };

    Stream.prototype.generateFastPlaylist = function() {
      var al, tl;
      al = FIRST_ARTIST_LIMIT;
      tl = FIRST_TRACK_LIMIT;
      return this.addArtists(al, (function(_this) {
        return function() {
          var i, _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= al ? _i < al : _i > al; i = 0 <= al ? ++_i : --_i) {
            _results.push(_this.addTracks(tl, function() {
              var j, _j, _results1;
              _results1 = [];
              for (j = _j = 0; 0 <= tl ? _j < tl : _j > tl; j = 0 <= tl ? ++_j : --_j) {
                _results1.push(_this.addVideo());
              }
              return _results1;
            }));
          }
          return _results;
        };
      })(this));
    };

    Stream.prototype.addTracksLoop = function() {
      if (this.similarArtists.length === 0) {
        return clog("similarArtists is end.");
      } else {
        setTimeout(this.addTracksLoop, addTracksLoopInterval(this.uncheckedTracks.length));
        return this.addTracks(DEFAULT_LIMIT_OF_TOP_TRACK);
      }
    };

    Stream.prototype.addVideoLoop = function() {
      if (this.uncheckedTracks.length === 0) {
        return setTimeout(this.addVideoLoop, 1000);
      } else {
        setTimeout(this.addVideoLoop, addVideoLoopInterval());
        return this.addVideo();
      }
    };

    Stream.prototype.addArtists = function(limit, callback) {
      clog("get similar artists " + limit + " ...");
      return req.getSimilarArtist(this.artistName, this.artistId, limit, (function(_this) {
        return function(artists) {
          if (!artists) {
            console.error("artists is undifined!");
            process.exit();
          } else {
            _this.similarArtists = artists;
            clog("" + artists.length + " artists is added!");
          }
          if (callback) {
            return callback();
          }
        };
      })(this));
    };

    Stream.prototype.addTracks = function(limit, callback) {
      var artist;
      clog("get top tracks " + limit + " ...");
      artist = randomPick(this.similarArtists);
      return req.getTopTrack(artist.name, artist.mbid, limit, (function(_this) {
        return function(tracks) {
          if (!tracks) {
            console.error("tracks is undifined!");
            return process.exit();
          } else {
            _this.uncheckedTracks = _this.uncheckedTracks.concat(tracks);
            clog("got " + tracks.length + " uncheckedTracks");
            clog("current uncheckedTracks: " + _this.uncheckedTracks.length);
            if (callback) {
              return callback();
            }
          }
        };
      })(this));
    };

    Stream.prototype.addVideo = function() {
      var artistName, keyword, track, trackName;
      track = randomPick(this.uncheckedTracks);
      artistName = track.artist.name;
      trackName = track.name;
      keyword = artistName + " " + trackName;
      clog("getVideo ... (" + artistName + " / " + trackName + ")");
      return req.searchVideo(keyword, 1, (function(_this) {
        return function(videos) {
          var id, newTrack, ng_word, title, video, _i, _len;
          video = videos[0];
          if (!video) {
            return console.error("video is undifined!!!!");
          } else {
            title = video.snippet.title;
            id = video.id.videoId;
            for (_i = 0, _len = NG_WORDS.length; _i < _len; _i++) {
              ng_word = NG_WORDS[_i];
              if (title.indexOf(ng_word) !== -1) {
                clog("### BLOCK by NG WORD " + title + " " + ng_word);
                return false;
              }
            }
            newTrack = {
              artist_name: artistName,
              track_name: trackName,
              youtube_id: id
            };
            if (track.image) {
              if (track.image[0]) {
                newTrack.image_url = track.image[0]['#text'];
              }
            }
            clog((" # # # added ! (" + _this.playlist.length + ") # # #   ") + id + "   " + title);
            return _this.playlist.push(newTrack);
          }
        };
      })(this));
    };

    Stream.prototype.playTest = function() {
      return clog("playTest");
    };

    return Stream;

  })();

  randomPick = function(ary) {
    var randIndex;
    randIndex = Math.floor(ary.length * Math.random());
    return ary.splice(randIndex, 1)[0];
  };

  module.exports = Stream;

  
var testArtists =
	[ { name: 'the HIATUS',
    mbid: '03a457ae-2307-4e7f-bc99-ae48316a214f',
    match: '1',
    url: 'www.last.fm/music/the+HIATUS',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: 'ストレイテナー',
    mbid: '',
    match: '0.529075',
    url: 'www.last.fm/music/%E3%82%B9%E3%83%88%E3%83%AC%E3%82%A4%E3%83%86%E3%83%8A%E3%83%BC',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: 'Nothing\'s Carved In Stone',
    mbid: '',
    match: '0.417177',
    url: 'www.last.fm/music/Nothing%27s+Carved+In+Stone',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: '[Champagne]',
    mbid: '',
    match: '0.394879',
    url: 'www.last.fm/music/%5BChampagne%5D',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: '10-FEET',
    mbid: 'e000f4d8-b722-4120-9b5d-0a13d6f39be3',
    match: '0.376297',
    url: 'www.last.fm/music/10-FEET',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: 'ASIAN KUNG-FU GENERATION',
    mbid: '14e410f5-97f2-48ba-b1f7-a3a44cbea05c',
    match: '0.340997',
    url: 'www.last.fm/music/ASIAN+KUNG-FU+GENERATION',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: 'MAN WITH A MISSION',
    mbid: 'd1c5a553-1fd0-43ca-a66a-da94c9f15570',
    match: '0.329277',
    url: 'www.last.fm/music/MAN+WITH+A+MISSION',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: 'RADWIMPS',
    mbid: '6f500293-7396-4903-b4fd-118127d06f9e',
    match: '0.32335',
    url: 'www.last.fm/music/RADWIMPS',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: 'ACIDMAN',
    mbid: '245462fb-c007-422a-9b89-88d285e890dd',
    match: '0.310989',
    url: 'www.last.fm/music/ACIDMAN',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' },
  { name: 'locofrank',
    mbid: '09907717-b521-444d-847c-3c42c4c591ed',
    match: '0.305419',
    url: 'www.last.fm/music/locofrank',
    image: [ [Object], [Object], [Object], [Object], [Object] ],
    streamable: '0' } ]
;

}).call(this);
